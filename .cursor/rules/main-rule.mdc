---
description: 
globs: 
alwaysApply: true
---

# 泰式按摩网站项目开发规范

## 一、项目概述

本项目是一个使用 Next.js 14 开发的泰式按摩网站，包含前端展示和后台管理功能。项目支持多语言（英文、中文、泰文、韩文），使用 TypeScript、Tailwind CSS 和 shadcn/ui 组件库构建，数据库采用 PostgreSQL，通过 Prisma ORM 进行数据访问。

## 二、技术栈规范

### 1. 前端技术

- 框架：Next.js 14
- 语言：TypeScript
- 样式：Tailwind CSS
- UI组件：shadcn/ui
- 包管理器：pnpm（优先于npm）
- 国际化：next-intl 3.22+，支持英文(en)、中文(zh)、泰文(th)、韩文(ko)

### 2. 后端技术

- API：Next.js API Routes
- 数据库：PostgreSQL
- ORM：Prisma
- 认证：基于JWT的认证系统

## 三、代码规范

### 1. 通用规范

- 使用 TypeScript 强类型定义，避免使用 any 类型
- 遵循 ESLint 和 Prettier 配置进行代码格式化
- 文件和目录名使用小写字母和连字符（kebab-case）
- 组件名使用大驼峰命名法（PascalCase）
- 变量和函数名使用小驼峰命名法（camelCase）
- 常量使用大写字母和下划线（UPPER_SNAKE_CASE）

### 2. 前端规范

- 所有UI组件必须使用 shadcn/ui 组件库，确保界面一致性
- 组件应遵循单一职责原则，避免过于复杂的组件
- 页面组件放置在 app 目录下，遵循 Next.js 14 的路由规则
- 共享组件放置在 components 目录下
- 状态管理优先使用 React 的 Context API 和 hooks
- 所有用户可见的文本必须支持国际化

### 3. API规范

- API路由遵循RESTful设计原则
- 所有API响应必须使用统一的响应格式
- 错误处理必须提供清晰的错误消息，支持多语言
- 批量操作API必须处理部分成功的情况，并在响应中指明
- API必须进行适当的输入验证和错误处理

## 四、国际化（i18n）规范

### 1. 国际化架构

- 使用 next-intl 3.22+ 实现多语言支持
- 支持四种语言：英文(en)、中文(zh)、泰文(th)、韩文(ko)
- 使用基于路径的方式，通过 URL 路径中的语言代码区分不同语言版本

### 2. 目录结构和文件组织

```
src/
├── i18n/
│   ├── config.ts           # 语言配置
│   ├── i18n.ts             # next-intl 配置
│   ├── navigation.ts       # 本地化导航工具
│   ├── client.ts           # 客户端国际化工具
│   ├── server.ts           # 服务器端国际化工具
│   ├── utils.ts            # 国际化工具函数
│   └── messages/           # 翻译文件目录
│       ├── en.json         # 英文翻译
│       ├── zh.json         # 中文翻译
│       ├── th.json         # 泰语翻译
│       └── ko.json         # 韩语翻译
├── app/
│   ├── [locale]/           # 多语言路由
│   │   ├── layout.tsx      # 多语言布局
│   │   ├── page.tsx        # 多语言首页
│   │   └── ...             # 其他页面
│   ├── about/              # 默认路由（重定向）
│   ├── services/           # 默认路由（重定向）
│   └── ...                 # 其他默认路由
├── middleware.ts           # 国际化中间件配置
```

### 3. 翻译文件结构

翻译文件使用嵌套的 JSON 结构，按功能模块组织：

```json
{
  "metadata": {
    "title": "网站标题",
    "description": "网站描述"
  },
  "common": {
    "navigation": {
      "home": "首页",
      "about": "关于我们"
    },
    "buttons": {
      "bookNow": "立即预约"
    }
  },
  "home": {
    "hero": {
      "title": "标题文本"
    }
  }
}
```

### 4. 国际化开发指南

#### 4.1 路由和重定向策略

- 使用中间件确保所有 URL 都有语言前缀
- 为主要页面创建默认路由，重定向到带有默认语言前缀的路径
- 在 navigation.ts 中定义所有路径，确保 Link 组件可以正确处理

```typescript
// middleware.ts
import createMiddleware from 'next-intl/middleware';

const locales = ['en', 'zh', 'th', 'ko'];
const defaultLocale = 'en';

export default createMiddleware({
  locales,
  defaultLocale,
  localeDetection: true,
  localePrefix: 'always'
});

export const config = {
  matcher: ['/((?!api|_next|images|favicon.ico).*)']
};
```

#### 4.2 服务器组件中的国际化

- 页面组件必须接收 locale 参数
- 使用 getTranslations 获取翻译

```typescript
// 在服务器组件中获取翻译
import { getTranslations } from 'next-intl/server';

export default async function ServerComponent({
  params: { locale }
}: {
  params: { locale: string }
}) {
  const t = await getTranslations('namespace');
  
  return <h1>{t('title')}</h1>;
}
```

#### 4.3 客户端组件中的国际化

- 添加 'use client' 指令
- 使用 useTranslations 钩子获取翻译
- 使用 next-intl 的 Link 组件

```typescript
'use client';

import { useTranslations } from 'next-intl';
import { Link } from '@/i18n/navigation';

export default function ClientComponent() {
  const t = useTranslations('namespace');
  
  return (
    <>
      <h1>{t('title')}</h1>
      <Link href="/about">关于我们</Link>
    </>
  );
}
```

#### 4.4 国际化最佳实践

- 为不同命名空间创建单独的翻译函数，使用有意义的变量名
- 避免在 JSX 中直接调用 useTranslations 钩子
- 避免使用翻译键中的默认值
- 确保所有 URL 都有语言前缀
- 一致使用 next-intl 的标准翻译钩子

```typescript
// ✅ 推荐方式
const t = useTranslations('services');
const commonT = useTranslations('common');

return (
  <div>
    <h2>{t('title')}</h2>
    <button>{commonT('buttons.submit')}</button>
  </div>
);
```

## 五、数据库规范

### 1. 模型设计

- 所有模型必须在 prisma/schema.prisma 中定义
- 表名使用复数形式（如 users, therapists）
- 字段名使用小驼峰命名法（camelCase）
- 所有表必须包含 id, createdAt, updatedAt 字段
- 外键关系必须明确定义，并设置适当的级联行为

### 2. 多语言支持

- 需要多语言支持的实体应使用翻译表（如 therapist_translations）
- 翻译表必须包含 locale 字段，标识语言代码
- 主表存储语言无关的数据，翻译表存储特定语言的数据

### 3. 数据操作

- 使用 Prisma 事务确保数据操作的原子性
- 批量操作应使用事务包装，确保数据一致性
- 敏感操作必须记录日志，便于审计和调试

## 六、按摩师管理模块规范

### 1. 数据模型

**Therapist表**：存储按摩师基本信息
- id: 唯一标识符
- imageUrl: 头像URL
- specialties: 专长数组
- experienceYears: 经验年限
- workStatus: 工作状态（AVAILABLE/WORKING）
- createdAt/updatedAt: 创建和更新时间

**TherapistTranslation表**：存储按摩师多语言翻译
- id: 唯一标识符
- therapistId: 关联的按摩师ID
- locale: 语言代码（en/zh/th/ko）
- name: 按摩师姓名
- bio: 按摩师简介
- specialtiesTranslation: 专长的翻译数组

### 2. API接口

- GET /api/therapists: 获取所有按摩师，支持分页、搜索和筛选
- GET /api/therapists/[id]: 获取单个按摩师详情
- POST /api/therapists: 创建新按摩师
- PUT /api/therapists/[id]: 更新按摩师信息
- DELETE /api/therapists/[id]: 删除按摩师
- PATCH /api/therapists: 批量操作按摩师（更新状态或删除）

## 七、服务管理模块规范

### 1. 数据模型

**Service表**：存储服务基本信息
- id: 唯一标识符
- price: 价格
- duration: 时长（分钟）
- imageUrl: 服务图片URL
- createdAt/updatedAt: 创建和更新时间

**ServiceTranslation表**：存储服务多语言翻译
- id: 唯一标识符
- serviceId: 关联的服务ID
- locale: 语言代码（en/zh/th/ko）
- name: 服务名称
- description: 服务描述
- slug: URL友好的标识符

### 2. API接口

与按摩师管理模块的API接口结构保持一致，确保错误处理和响应格式的统一性。

## 八、数据库初始化和测试规范

### 1. 种子脚本

- 使用 console.log 而非 process.stdout.write 输出日志
- 在创建新数据前清理现有数据，避免冲突
- 使用事务确保数据创建的原子性
- 添加详细的日志记录，便于调试
- 种子脚本应包含所有必要的初始数据（管理员用户、基础服务、示例按摩师等）

### 2. 测试脚本

- 创建专门的测试脚本验证数据库连接和数据完整性
- 测试脚本应能检查所有实体的记录数和示例数据
- 测试批量操作的各种边缘情况

## 九、国际化测试和验证

### 1. 国际化测试清单

- 检查所有页面在所有支持的语言中是否正确显示
- 验证语言切换功能是否正常工作
- 确认所有动态内容（例如日期、数字）是否根据语言正确格式化
- 测试 URL 路由是否正确处理语言参数
- 验证 SEO 元数据是否根据语言正确生成
- 检查是否存在显示翻译键名称而不是翻译内容的情况
- 验证所有组件是否使用标准翻译方法
- 测试直接访问无语言前缀的 URL 是否正确重定向

### 2. 自动化测试

为国际化功能编写自动化测试，确保：
- 所有语言路由正确加载
- 语言切换功能正常工作
- 翻译键不缺失
- 无语言前缀的 URL 正确重定向

## 十、开发流程规范

### 1. 开发步骤

- 每个功能开发前先明确需求和设计
- 先开发数据模型和API接口
- 再开发前端UI和交互
- 每个开发步骤后进行测试，确保功能无误

### 2. 测试要求

- 开发完成后必须进行功能测试
- API接口必须测试各种输入情况，包括边缘情况
- UI必须在不同语言设置下测试

### 3. 部署流程

- 使用环境变量区分开发、测试和生产环境
- 部署前必须运行数据库迁移
- 首次部署时必须运行种子脚本初始化数据

## 十一、错误处理和日志规范

### 1. 错误处理

- 前端错误必须向用户提供友好的错误提示，支持多语言
- API错误必须返回适当的HTTP状态码和详细的错误信息
- 数据库操作错误必须记录详细日志，包括操作类型和参数

### 2. 日志记录

- 使用结构化日志格式，便于分析
- 记录关键操作的日志，如用户登录、数据修改等
- 敏感信息（如密码）不得记录在日志中

## 十二、安全规范

### 1. 认证和授权

- 使用JWT进行用户认证
- 实施基于角色的访问控制（RBAC）
- API接口必须验证用户权限

### 2. 数据安全

- 密码必须使用加密算法存储
- API密钥等敏感信息必须通过环境变量管理
- 定期备份数据库，防止数据丢失

## 十三、性能优化规范

### 1. 前端优化

- 使用Next.js的静态生成和服务器端渲染优化性能
- 实施图片懒加载和优化
- 使用适当的缓存策略

### 2. 后端优化

- 优化数据库查询，避免N+1问题
- 实施适当的API缓存
- 大型列表实施分页加载

## 十四、国际化组件开发工作流

### 1. 设计阶段

- 确定组件需要的翻译键
- 在所有语言文件中添加相应的翻译

### 2. 实现阶段

- 添加 'use client' 指令（如果是客户端组件）
- 使用 useTranslations 钩子获取翻译
- 如果组件需要来自多个命名空间的翻译，为每个命名空间创建单独的翻译函数
- 使用有意义的变量名区分不同命名空间的翻译函数
- 避免在 JSX 中直接调用 useTranslations 钩子
- 确保组件使用 next-intl/navigation 提供的 Link 组件

### 3. 测试阶段

- 在所有支持的语言中测试组件
- 检查是否存在显示翻译键名称的情况
- 验证链接是否包含正确的语言代码
- 测试直接访问无语言前缀的 URL 是否正确重定向

### 4. 集成阶段

- 确保父组件正确传递 locale 参数给子组件
- 验证组件在页面中的显示

本规范旨在确保项目开发的一致性和质量，开发团队应严格遵循。规范可根据项目进展和需求变化进行调整和完善。

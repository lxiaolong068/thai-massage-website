---
description: 
globs: 
alwaysApply: true
---
# 泰式按摩网站项目开发规范

## 一、项目概述

本项目是一个使用 Next.js 14 开发的泰式按摩网站。前端用户界面支持多语言（英文、中文、泰文、韩文），后端 API 和管理后台统一使用英语。项目使用 TypeScript、Tailwind CSS 和 shadcn/ui 组件库构建，数据库采用 PostgreSQL，通过 Prisma ORM 进行数据访问。

## 二、技术栈规范

### 1. 前端技术

- 框架：Next.js 14
- 语言：TypeScript
- 样式：Tailwind CSS
- UI组件：shadcn/ui
- 包管理器：pnpm（优先于npm）
- 国际化：next-intl 3.22+，仅用于前端用户界面，支持英文(en)、中文(zh)、泰文(th)、韩文(ko)

### 2. 后端技术

- API：Next.js API Routes（统一使用英语）
- 数据库：PostgreSQL
- ORM：Prisma
- 认证：基于JWT的认证系统
- 语言：统一使用英语进行开发和响应

## 三、代码规范

### 1. 通用规范

- 使用 TypeScript 强类型定义，避免使用 any 类型
- 遵循 ESLint 和 Prettier 配置进行代码格式化
- 文件和目录名使用小写字母和连字符（kebab-case）
- 组件名使用大驼峰命名法（PascalCase）
- 变量和函数名使用小驼峰命名法（camelCase）
- 常量使用大写字母和下划线（UPPER_SNAKE_CASE）
- 后端代码（包括注释）统一使用英语

### 2. 前端规范

- 所有UI组件必须使用 shadcn/ui 组件库，确保界面一致性
- 组件应遵循单一职责原则，避免过于复杂的组件
- 页面组件放置在 app 目录下，遵循 Next.js 14 的路由规则
- 共享组件放置在 components 目录下
- 状态管理优先使用 React 的 Context API 和 hooks
- 仅用户界面相关的文本需要支持国际化
- 管理后台界面统一使用英语，无需支持多语言

### 3. API规范

- API路由遵循RESTful设计原则
- API的代码、注释、错误消息统一使用英语
- 所有API响应必须使用统一的英语响应格式
- 错误处理必须提供清晰的英语错误消息
- 批量操作API必须处理部分成功的情况，并在响应中用英语指明
- API必须进行适当的输入验证和错误处理

## 四、国际化（i18n）规范

### 1. 国际化范围

- 仅前端用户界面需要支持多语言
- 后端API和管理后台统一使用英语
- 数据库中的系统字段使用英语
- 错误消息和日志使用英语

### 2. 目录结构和文件组织

```
src/
├── i18n/
│   ├── config.ts           # 语言配置
│   ├── i18n.ts             # next-intl 配置
│   ├── navigation.ts       # 本地化导航工具
│   ├── client.ts           # 客户端国际化工具
│   ├── utils.ts            # 国际化工具函数（仅用于前端）
│   └── messages/           # 仅用于前端UI的翻译文件
│       ├── en.json         # 英文翻译
│       ├── zh.json         # 中文翻译
│       ├── th.json         # 泰语翻译
│       └── ko.json         # 韩语翻译
```

// ... existing code ...

### 3. 翻译文件结构

翻译文件仅包含前端UI所需的文本：

```json
{
  "metadata": {
    "title": "网站标题",
    "description": "网站描述"
  },
  "common": {
    "navigation": {
      "home": "首页",
      "about": "关于我们"
    },
    "buttons": {
      "bookNow": "立即预约"
    }
  }
}
```

// ... existing code ...

## 五、数据库规范

### 1. 模型设计

- 所有模型必须在 prisma/schema.prisma 中定义
- 表名和字段名统一使用英语，采用复数形式（如 users, therapists）
- 字段名使用小驼峰命名法（camelCase）
- 所有表必须包含 id, createdAt, updatedAt 字段
- 外键关系必须明确定义，并设置适当的级联行为
- 所有系统字段和配置使用英语

### 2. 多语言内容存储

- 需要多语言的内容使用翻译表（如 therapist_translations）
- 翻译表必须包含 locale 字段，标识语言代码
- 主表存储语言无关的数据，使用英语命名
- 系统配置和状态字段统一使用英语

## 六、错误处理和日志规范

### 1. 错误处理

- API错误消息统一使用英语
- 前端展示的错误消息需要支持多语言
- 系统日志统一使用英语记录

### 2. 日志记录

- 使用英语记录所有日志
- 使用结构化日志格式，便于分析
- 记录关键操作的日志，如用户登录、数据修改等
- 敏感信息（如密码）不得记录在日志中

## 七、管理后台规范

### 1. 界面语言

- 管理后台界面统一使用英语
- 不需要支持多语言切换
- 所有操作提示和错误消息使用英语

### 2. 数据展示

- 表格、表单等组件的标签使用英语
- 状态、选项等系统数据使用英语
- 用户输入的多语言内容可以展示，但界面文本保持英语

// ... existing code ...